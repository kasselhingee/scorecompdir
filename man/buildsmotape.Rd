% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildsmotape.R, R/manifoldtransform.R,
%   R/tapell.R, R/tapesmo.R
\name{buildsmotape}
\alias{buildsmotape}
\alias{manifoldtransform}
\alias{tapell}
\alias{tapesmo}
\title{Build a CppAD Tapes for Score Matching}
\usage{
buildsmotape(
  start,
  tran,
  man,
  llname,
  ytape,
  usertheta,
  divweight = "ones",
  acut = 1,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE
)

manifoldtransform(start, tran = "identity", man = start)

tapell(
  llname,
  ytape,
  usertheta,
  tran,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE
)

tapesmo(lltape, tran, man, divweight, acut = 1, verbose = FALSE)
}
\arguments{
\item{start}{The starting manifold. Used for checking that \code{tran} and \code{man} match.}

\item{tran}{A transform object (of type \code{Rcpp_transform_ad}), typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}

\item{man}{A transform object (of type \code{Rcpp_man_ad}) matching \code{tran}, and typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}

\item{llname}{The name of the log-likelihood function to tape}

\item{ytape}{An example measurement value to use for creating the tape. In the natural manifold of the log-likelihood function. \code{ytape} will be converted to the manifold according to the \code{toM()} method for \code{tran} before taping.
Please ensure that \code{ytape} is the interior of the manifold, and it is probably best if all components of \code{tran$toM(ytape)} are non-zero.}

\item{usertheta}{A vector of parameter elements for the likelihood function. \code{NA} elements will become \emph{dynamic parameters}. Other elements will be fixed at the provided value. The length of \code{usertheta} must be the correct length for the log-likelihood, no checking is conducted.}

\item{divweight}{The name of the boundary weight function ("ones" for manifolds without boundary). For the simplex and positive orthant of the sphere, "prodsq" and "minsq" are possible.}

\item{acut}{The threshold \eqn{a_c} in the boundary weight function \code{divweight}. Ignored for \code{divweight = "ones"}.}

\item{thetatape_creator}{A function that accepts an integer \code{n}, and returns a vector of \code{n} length. The function is used to fill in the \code{NA} elements of \code{usertheta} when building the tapes. Please ensure that the values filled by \code{thetatape_creator} lead to plausible parameter vectors for the chosen log-likelihood.}

\item{verbose}{If \code{TRUE}, some information about the tape is printed.}

\item{lltape}{Tape of the log-likelihood function constructed using \code{\link[=tapell]{tapell()}}.}
}
\value{
\code{buildsmotape()} returns a list of the log-likelihood tape (note that the \emph{input} for this tape is a function on the manifold), the tape of the score matching objective (the \emph{input} here is the non-fixed parameter values), and some information used to generate the tape.

\code{manifoldtransform()} returns a named list with:
\itemize{
\item \code{tran} A object of type \code{Rcpp_transform_ad} representing the transform
\item \code{man} A object of type \code{Rcpp_man_ad} representing the manifold
}

\code{tapell()} returns an \code{\link{ADFun}} object with two additional attributes accessed via \code{attr()}:
\itemize{
\item \code{ytape} The value of \code{ytape}
\item \code{tran} The name of the transform specified in \code{tran}.
}

\code{tapesmo()} returns an \code{\link{ADFun}} object.
}
\description{
Generates \code{CppAD} tapes for the log-likelihood and score matching objective  for a model specified by name and an optional transformation to a manifold.
Three steps are performed by \code{buildsmotape()}, corresponding to each of the functions \code{manifoldtransform()}, \code{tapell()} and \code{tapesmo()}.
}
\details{
When using, \code{CppAD} one first creates \emph{tapes} of functions. These tapes can then be used for evaluating the function and its derivatives, and generating further tapes through argument swapping, differentiation and composition.
The taping relies on specifying typical argument values for the functions, so the programming is simplest when the function is defined without conditions.
Tapes can have both \emph{independent} variables and \emph{dynamic} variables.
The differentiation with \code{CppAD} occurs with respect to the independent variables.
Tapes of tapes are possible, including tapes that swap the independent and dynamic variables - this is how this package differentiates with respect to a dynamic variables.

To build a tape for the score matching objective function, the package first tapes the map from a point \eqn{z} on the manifold to the value of the log-likelihood, where the independent variable is the \eqn{z}, and the dynamic variable is a vector of the \emph{non}-fixed parameter values.
This tape is then used to generate a tape for the score matching objective with the non-fixed parameter values as the independent variable.

Only some combinations of \code{start}, \code{tran} and \code{man} are available because \code{tran} must map between \code{start} and \code{man}.
These combinations of \code{start}-\code{tran}-\code{man} are available:
\itemize{
\item sim-sqrt-sph
\item sim-identity-sim
\item sim-alr-Euc
\item sim-clr-Hn111
\item sph-identity-sph
}
}
\section{Functions}{
\itemize{
\item \code{manifoldtransform()}: Build an object specifying the transformation to and from a manifold.

\item \code{tapell()}: Creates a \code{CppAD} tape of the log-likelihood as a function of values on the provided manifold. The log-likelihood accounts for the change of measure between the natural manifold of the log-likelihood and the manifold with transformation provided by \code{tran}.

\item \code{tapesmo()}: Generates a \code{CppAD} tape of the empirical score matching objective function for a single measurement (\eqn{\tilde\psi} in Score Matching vignette). Requires a tape of the log-likelihood function and the corresponding manifold with the transformation.

}}
\section{Introduction to CppAD Tapes}{
This package uses version 2022000.2 of the algorithmic differentiation library \code{CppAD} \insertCite{bell2023cp}{scorecompdir} to build score matching estimators.
Full help for \code{CppAD} can be found at \url{https://cppad.readthedocs.io/}.

Differentiation proceeds by \emph{taping} the basic (\emph{atomic}) operations performed on the independent variables and dynamic parameters. The atomic operations include multiplication, division, addition, sine, cosine, exponential and many more.
Example values for the variables and parameters are used to conduct this taping, so care must be taken with any conditional (e.g. if-then) steps, and \code{CppAD} has \href{https://cppad.readthedocs.io/en/latest/CondExp.html}{special tools for this}.
Once the taping is complete an \href{https://cppad.readthedocs.io/en/latest/ADFun.html}{\code{ADFun}} object is created.
This tape can be evaluated, differentiated, used for further taping (see \href{https://cppad.readthedocs.io/en/latest/base2ad.html}{base2ad}), solving differential equations and more.
The sequence of operations can also be printed.
The differentiation is with respect to the independent variables, although the dynamic parameters can be altered, allowing for swapping independent variables and dynamic parameters.
}

\section{Warning: multiple CPU}{
Each time computations such as derivatives are performed the corresponding \verb{C++} object is altered. Parallel use of the same \code{ADFun} object thus requires care and is not tested. For now I recommend creating a new \code{ADFun} object for each CPU.
}

\section{Warning}{
 There is limited checking of the inputs.
}

\examples{
p <- 3
u <- movMF::rmovMF(1, rep(1, p))
ltheta <- p #length of vMF parameter vector
intheta <- rep(NA, length.out = ltheta)
tapes <- buildsmotape("sph", "identity", "sph", "vMF",
              ytape = u,
              usertheta = intheta,
              "ones", verbose = FALSE
              )
evaltape(tapes$lltape, u, runif(n = ltheta))
evaltape(tapes$smotape, runif(n = ltheta), u)
manifoldtransform("sim", "alr", "Euc")
maninfo <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(llname = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tran = maninfo$tran) 
pForward0(ppitape$ptr, 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
pJacobian(ppitape$ptr, 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
pHessian(ppitape$ptr, 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
sqrtman <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(llname = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tran = sqrtman$tran)
ppismotape <- tapesmo(lltape = ppitape,
                      tran = sqrtman$tran,
                      man = sqrtman$man,
                      divweight = "minsq",
                      acut = 0.1,
                      verbose = FALSE)
pForward0(ppismotape$ptr, 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(-0.1,-0.1,0.5)),
  rep(1/3, 3)) 
}
\references{
\insertAllCited{}
}
\seealso{
Other tape builders: 
\code{\link{moretapebuilders}}
}
\concept{tape builders}
