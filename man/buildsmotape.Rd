% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildsmotape.R, R/manifoldtransform.R,
%   R/tapell.R, R/tapesmo.R
\name{buildsmotape}
\alias{buildsmotape}
\alias{manifoldtransform}
\alias{tapell}
\alias{tapesmo}
\title{Build CppAD Tapes for Score Matching}
\usage{
buildsmotape(
  start,
  tran,
  end,
  llname,
  ytape,
  usertheta,
  bdryw = "ones",
  acut = 1,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE
)

manifoldtransform(start, tran = "identity", end = start)

tapell(
  llname,
  ytape,
  usertheta,
  tranobj,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE
)

tapesmo(lltape, tranobj, man, bdryw, acut = 1, verbose = FALSE)
}
\arguments{
\item{start}{The starting manifold. Used for checking that \code{tran} and \code{man} match.}

\item{tran}{The name of a transformation. Available transformations are
\itemize{
\item `srqt'
\item `alr'
\item `clr'
\item \verb{none' (or }identity')
}}

\item{end}{The name of the manifold that \code{tran} maps \code{start} to. Available manifolds are:
\itemize{
\item `sph' unit sphere
\item `Hn111' hyperplane normal to 1, 1, 1, 1, ...
\item `sim' simplex
\item `Euc' Euclidean space
}}

\item{llname}{The name of the log-likelihood function to tape}

\item{ytape}{An example measurement value to use for creating the tape. In the natural manifold of the log-likelihood function. \code{ytape} will be converted to the manifold according to the \code{toM()} method for \code{tranobj} before taping.
Please ensure that \code{ytape} is the interior of the manifold, and it is probably best if all components of \code{tranobj$toM(ytape)} are non-zero.}

\item{usertheta}{A vector of parameter elements for the likelihood function. \code{NA} elements will become \emph{dynamic parameters}. Other elements will be fixed at the provided value. The length of \code{usertheta} must be the correct length for the log-likelihood, no checking is conducted.}

\item{bdryw}{The name of the boundary weight function ("ones" for manifolds without boundary). For the simplex and positive orthant of the sphere, "prodsq" and "minsq" are possible.}

\item{acut}{The threshold \eqn{a_c} in the boundary weight function \code{bdryw}. Ignored for \code{bdryw = "ones"}.}

\item{thetatape_creator}{A function that accepts an integer \code{n}, and returns a vector of \code{n} length. The function is used to fill in the \code{NA} elements of \code{usertheta} when building the tapes. Please ensure that the values filled by \code{thetatape_creator} lead to plausible parameter vectors for the chosen log-likelihood.}

\item{verbose}{If \code{TRUE}, some information about the tape is printed.}

\item{tranobj}{A transform object (of type \code{Rcpp_transform_ad}), typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}

\item{lltape}{Tape of the log-likelihood function constructed using \code{\link[=tapell]{tapell()}}.}

\item{man}{A transform object (of type \code{Rcpp_man_ad}) matching \code{tranobj}, and typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}
}
\value{
\code{buildsmotape()} returns a list of:
\itemize{
\item an \code{\link{ADFun}} object containing a log-likelihood tape with \eqn{z} on the \code{end} manifold as the independent variable
\item an \code{\link{ADFun}} object containing a tape of the score matching discrepancy with the non-fixed parameter values as the independent variables
\item some information used to generate the tapes
}

\code{manifoldtransform()} returns a named list with:
\itemize{
\item \code{tran} A object of type \code{Rcpp_transform_ad} representing the transform
\item \code{man} A object of type \code{Rcpp_man_ad} representing the end manifold
}

\code{tapell()} returns an \code{\link{ADFun}} object with two additional attributes accessed via \code{attr()}:
\itemize{
\item \code{ytape} The value of \code{ytape}
\item \code{tran} The name of the transform specified in \code{tranobj}.
}

\code{tapesmo()} returns an \code{\link{ADFun}} object.
}
\description{
The function \code{buildsmotape()} generates \code{CppAD} tapes (called \code{ADFun}) for the log-likelihood (without normalising constant) and the score matching discrepancy function \eqn{A(z) + B(z) + C(z)} from \code{vignette("scorematchingintro")} for a specified model faimly.
Three steps are performed by \code{buildsmotape()}: first an object that specifies the manifold and any transformation to another manifold is created using \code{\link[=manifoldtransform]{manifoldtransform()}}; then a tape of the log-likelihood (without normalising constant) is created using \code{\link[=tapell]{tapell()}}; finally a tape of \eqn{A(z) + B(z) + C(z)} is created using \code{\link[=tapesmo]{tapesmo()}}.
}
\details{
The model log-likelihood without normalising constant must be implemented in \verb{C++} and is selected by name. Similarly the transforms of the manifold must be implemented in \verb{C++} and selected by name.

When using, \code{CppAD} one first creates \emph{tapes} of functions. These tapes can then be used for evaluating the function and its derivatives, and generating further tapes through argument swapping, differentiation and composition.
The taping relies on specifying typical argument values for the functions, so the programming is simplest when the function is defined without conditions.
Tapes can have both \emph{independent} variables and \emph{dynamic} variables.
The differentiation with \code{CppAD} occurs with respect to the independent variables.
Tapes of tapes are possible, including tapes that swap the independent and dynamic variables - this is how this package differentiates with respect to a dynamic variables (see \code{\link[=swapDynamic]{swapDynamic()}}).

To build a tape for the score matching discrepancy function, the package first tapes the map from a point \eqn{z} on the \code{end} manifold to the value of the improper log-likelihood, where the independent variable is the \eqn{z}, and the dynamic variable is a vector of the parameters to estimate, and remaining parameters are fixed and not estimated.
This tape is then used to generate a tape for the score matching discrepancy with the parameters to estimate are the independent variable.

Only some combinations of \code{start}, \code{tran} and \code{end} are available because \code{tran} must map between \code{start} and \code{end}.
These combinations of \code{start}-\code{tran}-\code{end} are available:
\itemize{
\item sim-sqrt-sph
\item sim-identity-sim
\item sim-alr-Euc
\item sim-clr-Hn111
\item sph-identity-sph
}
}
\section{Functions}{
\itemize{
\item \code{manifoldtransform()}: Build an object specifying the transformation to and from a manifold.

\item \code{tapell()}: Creates a \code{CppAD} tape of an improper log-likelihood as a function of values on the \code{end} manifold in \code{tranobj}. The Jacobian of the associated transformation is used to convert the log-likelihood on the natural manifold \code{start} of the log-likelihood to the \code{end} manifold.
This conversion is needed to account for the change in measure between the manifolds.

\item \code{tapesmo()}: Generates a \code{CppAD} tape of the empirical score matching discrepancy function for a single measurement (\eqn{\tilde\psi} in Score Matching vignette). Requires a tape of the log-likelihood function and the corresponding manifold with the transformation.

}}
\section{Introduction to CppAD Tapes}{
This package uses version 2022000.2 of the algorithmic differentiation library \code{CppAD} \insertCite{bell2023cp}{scorecompdir} to build score matching estimators.
Full help for \code{CppAD} can be found at \url{https://cppad.readthedocs.io/}.

Differentiation proceeds by \emph{taping} the basic (\emph{atomic}) operations performed on the independent variables and dynamic parameters. The atomic operations include multiplication, division, addition, sine, cosine, exponential and many more.
Example values for the variables and parameters are used to conduct this taping, so care must be taken with any conditional (e.g. if-then) operations, and \code{CppAD} has \href{https://cppad.readthedocs.io/en/latest/CondExp.html}{special tools for this}.
The result of taping is an \href{https://cppad.readthedocs.io/en/latest/ADFun.html}{\code{ADFun}} object, often called a \emph{tape}.
This \code{ADFun} object can be evaluated, differentiated, used for further taping (see \href{https://cppad.readthedocs.io/en/latest/base2ad.html}{base2ad}), solving differential equations and more.
The differentiation is with respect to the independent variables, however the dynamic parameters can be altered which allows for creating a new \code{ADFun} object where the dynamic parameters have become independent variables (see \code{\link[=tapeSwap]{tapeSwap()}}).
For the purposes of score matching, there is a third type of parameter: the \emph{fixed} parameters, which are the elements of the model's parameter vector that are given and not estimated.
}

\section{Warning: multiple CPU}{
Each time computations such as derivatives are performed the corresponding \verb{C++} object is altered. Parallel use of the same \code{ADFun} object thus requires care and is not tested. For now I recommend creating a new \code{ADFun} object for each CPU.
}

\section{Warning}{
 There is limited checking of the inputs.
}

\examples{
p <- 3
u <- movMF::rmovMF(1, rep(1, p))
ltheta <- p #length of vMF parameter vector
intheta <- rep(NA, length.out = ltheta)
tapes <- buildsmotape("sph", "identity", "sph", "vMF",
              ytape = u,
              usertheta = intheta,
              "ones", verbose = FALSE
              )
evaltape(tapes$lltape, u, runif(n = ltheta))
evaltape(tapes$smotape, runif(n = ltheta), u)
manifoldtransform("sim", "alr", "Euc")
maninfo <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(llname = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tranobj = maninfo$tran) 
evaltape(ppitape, 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
evaltape(tapeJacobian(ppitape), 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
sqrtman <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(llname = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tranobj = sqrtman$tran)
ppismotape <- tapesmo(lltape = ppitape,
                      tranobj = sqrtman$tran,
                      man = sqrtman$man,
                      bdryw = "minsq",
                      acut = 0.1,
                      verbose = FALSE)
pForward0(ppismotape$ptr, 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(-0.1,-0.1,0.5)),
  rep(1/3, 3)) 
}
\references{
\insertAllCited{}
}
\seealso{
Other tape builders: 
\code{\link{moretapebuilders}}
}
\concept{tape builders}
