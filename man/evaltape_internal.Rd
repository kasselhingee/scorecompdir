% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{evaltape_internal}
\alias{evaltape_internal}
\alias{pForward0}
\alias{pJacobian}
\alias{pHessian}
\alias{pParameter}
\alias{pTaylorApprox}
\title{Advanced: Evaluate \code{CppAD} Tapes via their Pointer}
\usage{
pForward0(pfun, x, dynparam)

pJacobian(pfun, x, dynparam)

pHessian(pfun, x, dynparam)

pParameter(pfun)

pTaylorApprox(pfun, x, centre, dynparam, order)
}
\arguments{
\item{pfun}{Rcpp::XPtr to an ADFun. Can be obtained as the \code{ptr} field of an \code{\link{ADFun}} object.}

\item{x}{A vector in the domain of the taped function}

\item{dynparam}{a vector of the dynamic parameters, if \code{pfun} has no dynamic parameter than pass \code{vector("numeric")}.}

\item{centre}{For pTaylorApprox. A vector in the domain of the taped function to approximate the value at \code{x} from.}

\item{order}{For pTaylorApprox. The order of Taylor expansion to use.}
}
\value{
A vector of numeric values, except \code{pParameter()}, which returns logical values.
}
\description{
The recommended method for evaluating tapes is \code{\link[=evaltape]{evaltape()}}.
Internally, \code{evaltape()} and other methods are using the methods documented here.
There methods access the tapes using \code{Rcpp::XPtr} objects and perform evaluations a single point at a time.
}
\section{Functions}{
\itemize{
\item \code{pForward0()}: Evaluates a tape without any differentiation at the given values of \code{x} and dynparam.
The name \code{pForward0} is a reference to the zero order \code{CppAD} method \href{https://cppad.readthedocs.io/forward_zero.html}{\code{forward}}, and the prefix 'p' is because the tape is passed as a pointer.

\item \code{pJacobian()}: Evaluates a the Jacobian of a tape using the \code{CppAD} \code{Jacobian} method \url{https://cppad.readthedocs.io/en/latest/Jacobian.html}.

\item \code{pHessian()}: Evaluates a the Hessian of a tape using the \code{CppAD} \code{Hessian} method \url{https://cppad.readthedocs.io/en/latest/Hessian.html}, assuming that range space of the taped function has dimension of \code{1}.

\item \code{pParameter()}: Test whether the returned values are constant with respect to the independent values using
\code{CppAD}'s \code{Parameter} method \url{https://cppad.readthedocs.io/en/latest/fun_property.html}.
Returns A vector of logical values. \code{TRUE} indicates that element of the tape result is constant.

\item \code{pTaylorApprox()}: The value of a recorded function approximated by Taylor expansion.
Returns the approximate value of \code{pfun} at \code{x}.

}}
\section{pParameter}{
The \code{CppAD} function \href{https://cppad.readthedocs.io/en/latest/fun_property.html#parameter}{\code{Parameter(i)}} returns \code{TRUE} when the \code{i}th component of the range does not depend on the independent value
(the \code{i}th component may still depend on the value of the dynamic parameters - see \url{https://cppad.readthedocs.io/en/latest/glossary.html#dynamic} ).
}

\section{pTaylorApprox}{
Approximates the value of a \code{CppAD} tape at \code{x} using a Taylor approximation at \code{centre}. The dynamic parameters of the tape are set by \code{dynparam}.
}

\seealso{
Other tape evaluators: 
\code{\link{evaltape}()},
\code{\link{quadratictape_parts}()},
\code{\link{smvalues_tape}()},
\code{\link{testquadratictape}()}
}
\concept{tape evaluators}
