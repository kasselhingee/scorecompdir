% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppi.R
\name{ppi}
\alias{ppi}
\title{Estimation of Polynomially-Tilted Pairwise Interaction (PPI) model}
\usage{
ppi(
  Y,
  paramvec = NULL,
  trans,
  method = "closed",
  w = rep(1, nrow(Y)),
  divweight = "ones",
  acut = NULL,
  bdrythreshold = 1e-10,
  shiftsize = bdrythreshold,
  approxorder = 10,
  control = default_Rcgmin(),
  paramvec_start = NULL
)
}
\arguments{
\item{Y}{A matrix of measurements. Each row is a measurement, each component is a dimension of the measurement.}

\item{paramvec}{Optionally a vector of the PPI models parameters. Non-NA values are fixed, NA-valued elements are estimated. Generate \code{paramvec} easily using \code{\link[=ppi_paramvec]{ppi_paramvec()}}.  If \code{NULL} then all elements of \eqn{A_L}, \eqn{b_L} and \eqn{\beta} are estimated.}

\item{trans}{The name of the transformation: "alr" (additive log ratio), "sqrt" or "none".}

\item{method}{"hardcoded" uses the hardcoded estimators by JS. "closed" uses \code{CppAD} to solve in closed form the a quadratic score matching objective using \code{\link[=cppad_closed]{cppad_closed()}}. "iterative" uses \code{\link[=cppad_search]{cppad_search()}} (which uses \code{CppAD} and \code{\link[Rcgmin:Rcgmin]{Rcgmin::Rcgmin()}}) to iteratively find the minimum of the weighted Hyvarinen divergence.}

\item{w}{Weights for each observation, if different observations have different importance. Used by \code{\link[=Windham]{Windham()}} and \code{\link[=ppi_robust]{ppi_robust()}} for robust estimation.}

\item{divweight}{The divergence weight function for down weighting measurements as they approach the manifold boundary. Either "ones", "minsq" or "prodsq". See details.}

\item{acut}{The threshold \eqn{a_c} in \code{divweight} to avoid over-weighting measurements interior to the simplex}

\item{bdrythreshold}{\code{iterative} or \code{closed} methods only. For measurements close to the boundary of the simplex Taylor approximation is applied. See \code{\link[=simplex_isboundary]{simplex_isboundary()}}.}

\item{shiftsize}{\code{iterative} or \code{closed} methods only. For Taylor approximation, approximation centres are chosen based on \code{shiftsize}. See \code{\link[=simplex_boundaryshift]{simplex_boundaryshift()}}.}

\item{approxorder}{\code{iterative} or \code{closed} methods only. Order of the Taylor approximation for measurements on the boundary of the simplex.}

\item{control}{\code{iterative} only. Passed to \code{\link[Rcgmin:Rcgmin]{Rcgmin::Rcgmin()}} to control the iterative solver. Default values are given by \code{\link[=default_Rcgmin]{default_Rcgmin()}}.}

\item{paramvec_start}{\code{iterative} method only. The starting guess for \code{Rcgmin} with possibly NA values for the fixed (not-estimated) elements. Generate \code{paramvec_start} easily using \code{\link[=ppi_paramvec]{ppi_paramvec()}}.}
}
\description{
Estimates the parameters of the Polynomially-Tilted Pairwise Interaction (PPI) model \insertCite{scealy2022sc}{scorecompdir} for compositional data.
For many situations computes the closed-form solution of the score matching estimator has been hardcoded by JLS \insertCite{scealy2022sc}{scorecompdir}.
In the other situations, the score matching estimate is found by iteratively minimising the \emph{weighted Hyvarinen divergence} \insertCite{@Equation 13, @scealy2022sc, @hyvarinen2005es}{scorecompdir} using algorithmic differentiation (\code{CppAD}) and \code{\link[Rcgmin:Rcgmin]{Rcgmin::Rcgmin()}}.
}
\details{
Estimation may be performed via transformation onto Euclidean space (additive log ratio transform), the positive quadrant of the sphere (square root transform), or without any transformation. In the latter two situations there is a boundary and \emph{weighted Hyvarinen divergence} \insertCite{@Equation 7, @scealy2022sc}{scorecompdir} is used.

There are three divergence weight functions available:
\itemize{
\item The function "ones" applies no weights and should be used whenever the manifold does not have a bounday.
\item The function "minsq" is the minima-based divergence weight function for the PPI model \insertCite{@Equation 12, @scealy2022sc}{scorecompdir}
\deqn{\tilde{h}(z)^2 = \min(z_1^2, z_2^2, ..., z_p^2, a_c^2).}{h(z)^2 = min(z1^2, z2^2, ..., zp^2, a_c^2),}
where \eqn{z} is a point in the positive orthant of the p-dimensional unit sphere
and \eqn{z_j}{zj} is the jth component of z.
\item The function "prodsq" is the product-based \insertCite{@Equation 9, @scealy2022sc}{scorecompdir}
\deqn{\tilde{h}(z)^2 = \min(\prod_{j=1}^{p} z_j^2, a_c^2).}{h(z)^2 = min(z1^2 * z2^2 * ... * zp^2, a_c^2),}
where \eqn{z} is a point in the positive orthant of the p-dimensional unit sphere
and \eqn{z_j}{zj} is the jth component of z.
}

Scealy and Wood \insertCite{@Theorem 1, @scealy2022sc}{scorecompdir} prove that minimising the weighted Hyvarinen Divergence is equivalent to minimising \eqn{\psi(f, f_0)} (See \strong{Score Matching} in \code{\link{scorecompdir-package}})
when the divergence weight function is smooth or for the functions "minsq" and "prodsq"  above when the manifold is the simplex or positive orthant of a sphere.

Hard-coded estimators are available for the following situations:
\itemize{
\item Square root transformation ("sqrt") with the "minsq" divergence weight function:
\itemize{
\item full parameter vector (\code{paramvec} not provided)
\item \code{paramvec} fixes only the final element of \eqn{\beta}
\item \code{paramvec} fixes all elements of \eqn{\beta}
\item \code{paramvec} fixes \eqn{b_L = 0} and provides fixed values of \eqn{\beta}
\item \code{paramvec} fixes \eqn{A_L=0} and \eqn{b_L=0}, leaving \eqn{\beta} to be fitted.
}
\item Square root transformation ("sqrt") with the "prodsq" divergence weight function:
\itemize{
\item \code{paramvec} fixes all elements of \eqn{\beta}
\item \code{paramvec} fixes \eqn{b_L = 0} and provides fixed values of \eqn{\beta}
\item \code{paramvec} fixes \eqn{A_L=0} and \eqn{b_L=0}, leaving \eqn{\beta} to be fitted.
}
\item The additive log ratio transformation ("alr") using the final component on the denominator, with \eqn{b_L=0} and fixed final component of \eqn{\beta}.
}
}
\section{PPI Model}{

The PPI model density is proportional to
\deqn{\exp(z_L^TA_Lz_L + b_L^Tz_L)\prod_{i=1}^p z_i^{\beta_i},}
where \eqn{p} is the dimension of \eqn{z}, and \eqn{z_L} represents a multivariate measurement \eqn{z} without the final (\eqn{p}th) component.
\eqn{A_L} is a \eqn{p-1 \times p-1} symmetric matrix that controls the covariance between components.
\eqn{b_L} is \eqn{p-1} vector that controls the location within the simplex
The \eqn{i}th component of \eqn{\beta} controls the concentration of density when the \eqn{i}th component is close to zero.
}

\examples{
model <- ppi_egmodel(1000)
estalr <- ppi(model$sample,
              paramvec = ppi_paramvec(betap = -0.5, p = ncol(model$sample)),
              trans = "alr", method = "closed")
estsqrt <- ppi(model$sample,
              trans = "sqrt", method = "closed",
              divweight = "minsq", acut = 0.1)
}
\references{
\insertAllCited{}
}
