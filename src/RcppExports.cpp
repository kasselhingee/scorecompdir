// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "scorecompdir_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pForward0
vecd pForward0(Rcpp::XPtr< CppAD::ADFun<double> > pfun, vecd x, vecd dynparam);
RcppExport SEXP _scorecompdir_pForward0(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< vecd >::type x(xSEXP);
    Rcpp::traits::input_parameter< vecd >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pForward0(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// pJacobian
vecd pJacobian(Rcpp::XPtr< CppAD::ADFun<double> > pfun, vecd x, vecd dynparam);
RcppExport SEXP _scorecompdir_pJacobian(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< vecd >::type x(xSEXP);
    Rcpp::traits::input_parameter< vecd >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pJacobian(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// pHessian
vecd pHessian(Rcpp::XPtr< CppAD::ADFun<double> > pfun, vecd x, vecd dynparam);
RcppExport SEXP _scorecompdir_pHessian(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< vecd >::type x(xSEXP);
    Rcpp::traits::input_parameter< vecd >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pHessian(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// pParameter
std::vector<bool> pParameter(Rcpp::XPtr< CppAD::ADFun<double> > pfun);
RcppExport SEXP _scorecompdir_pParameter(SEXP pfunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    rcpp_result_gen = Rcpp::wrap(pParameter(pfun));
    return rcpp_result_gen;
END_RCPP
}
// pTapeJacobian
Rcpp::XPtr< CppAD::ADFun<double> > pTapeJacobian(Rcpp::XPtr< CppAD::ADFun<double> > pfun, veca1 x, veca1 dynparam);
RcppExport SEXP _scorecompdir_pTapeJacobian(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< veca1 >::type x(xSEXP);
    Rcpp::traits::input_parameter< veca1 >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pTapeJacobian(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// pTapeHessian
Rcpp::XPtr< CppAD::ADFun<double> > pTapeHessian(Rcpp::XPtr< CppAD::ADFun<double> > pfun, veca1 x, veca1 dynparam);
RcppExport SEXP _scorecompdir_pTapeHessian(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< veca1 >::type x(xSEXP);
    Rcpp::traits::input_parameter< veca1 >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pTapeHessian(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// pTapeGradOffset
Rcpp::XPtr< CppAD::ADFun<double> > pTapeGradOffset(Rcpp::XPtr< CppAD::ADFun<double> > pfun, veca1 x, veca1 dynparam);
RcppExport SEXP _scorecompdir_pTapeGradOffset(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< veca1 >::type x(xSEXP);
    Rcpp::traits::input_parameter< veca1 >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(pTapeGradOffset(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// ptapelogdetJ
Rcpp::XPtr< CppAD::ADFun<double> > ptapelogdetJ(Rcpp::XPtr< CppAD::ADFun<double> > pfun, veca1 x, veca1 dynparam);
RcppExport SEXP _scorecompdir_ptapelogdetJ(SEXP pfunSEXP, SEXP xSEXP, SEXP dynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< veca1 >::type x(xSEXP);
    Rcpp::traits::input_parameter< veca1 >::type dynparam(dynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(ptapelogdetJ(pfun, x, dynparam));
    return rcpp_result_gen;
END_RCPP
}
// swapDynamic
Rcpp::XPtr< CppAD::ADFun<double> > swapDynamic(Rcpp::XPtr< CppAD::ADFun<double> > pfun, veca1 newvalue, veca1 newdynparam);
RcppExport SEXP _scorecompdir_swapDynamic(SEXP pfunSEXP, SEXP newvalueSEXP, SEXP newdynparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< veca1 >::type newvalue(newvalueSEXP);
    Rcpp::traits::input_parameter< veca1 >::type newdynparam(newdynparamSEXP);
    rcpp_result_gen = Rcpp::wrap(swapDynamic(pfun, newvalue, newdynparam));
    return rcpp_result_gen;
END_RCPP
}
// ptapell
Rcpp::XPtr< CppAD::ADFun<double> > ptapell(veca1 z_ad, veca1 theta_ad, std::string llname, transform_a1type& tran, Eigen::Matrix<int, Eigen::Dynamic, 1> fixedtheta, bool verbose);
RcppExport SEXP _scorecompdir_ptapell(SEXP z_adSEXP, SEXP theta_adSEXP, SEXP llnameSEXP, SEXP tranSEXP, SEXP fixedthetaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1 >::type z_ad(z_adSEXP);
    Rcpp::traits::input_parameter< veca1 >::type theta_ad(theta_adSEXP);
    Rcpp::traits::input_parameter< std::string >::type llname(llnameSEXP);
    Rcpp::traits::input_parameter< transform_a1type& >::type tran(tranSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<int, Eigen::Dynamic, 1> >::type fixedtheta(fixedthetaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ptapell(z_ad, theta_ad, llname, tran, fixedtheta, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ptapesmo
Rcpp::XPtr< CppAD::ADFun<double> > ptapesmo(veca1 u_ad, veca1 theta_ad, Rcpp::XPtr< CppAD::ADFun<double> > pll, transform_a1type& tran, manifold_a1type& man, std::string weightname, const double acut, bool verbose);
RcppExport SEXP _scorecompdir_ptapesmo(SEXP u_adSEXP, SEXP theta_adSEXP, SEXP pllSEXP, SEXP tranSEXP, SEXP manSEXP, SEXP weightnameSEXP, SEXP acutSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1 >::type u_ad(u_adSEXP);
    Rcpp::traits::input_parameter< veca1 >::type theta_ad(theta_adSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pll(pllSEXP);
    Rcpp::traits::input_parameter< transform_a1type& >::type tran(tranSEXP);
    Rcpp::traits::input_parameter< manifold_a1type& >::type man(manSEXP);
    Rcpp::traits::input_parameter< std::string >::type weightname(weightnameSEXP);
    Rcpp::traits::input_parameter< const double >::type acut(acutSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ptapesmo(u_ad, theta_ad, pll, tran, man, weightname, acut, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pTaylorApprox
vecd pTaylorApprox(Rcpp::XPtr< CppAD::ADFun<double> > pfun, vecd x, vecd centre, vecd dynparam, size_t order);
RcppExport SEXP _scorecompdir_pTaylorApprox(SEXP pfunSEXP, SEXP xSEXP, SEXP centreSEXP, SEXP dynparamSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type pfun(pfunSEXP);
    Rcpp::traits::input_parameter< vecd >::type x(xSEXP);
    Rcpp::traits::input_parameter< vecd >::type centre(centreSEXP);
    Rcpp::traits::input_parameter< vecd >::type dynparam(dynparamSEXP);
    Rcpp::traits::input_parameter< size_t >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(pTaylorApprox(pfun, x, centre, dynparam, order));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_manifolds();

static const R_CallMethodDef CallEntries[] = {
    {"_scorecompdir_pForward0", (DL_FUNC) &_scorecompdir_pForward0, 3},
    {"_scorecompdir_pJacobian", (DL_FUNC) &_scorecompdir_pJacobian, 3},
    {"_scorecompdir_pHessian", (DL_FUNC) &_scorecompdir_pHessian, 3},
    {"_scorecompdir_pParameter", (DL_FUNC) &_scorecompdir_pParameter, 1},
    {"_scorecompdir_pTapeJacobian", (DL_FUNC) &_scorecompdir_pTapeJacobian, 3},
    {"_scorecompdir_pTapeHessian", (DL_FUNC) &_scorecompdir_pTapeHessian, 3},
    {"_scorecompdir_pTapeGradOffset", (DL_FUNC) &_scorecompdir_pTapeGradOffset, 3},
    {"_scorecompdir_ptapelogdetJ", (DL_FUNC) &_scorecompdir_ptapelogdetJ, 3},
    {"_scorecompdir_swapDynamic", (DL_FUNC) &_scorecompdir_swapDynamic, 3},
    {"_scorecompdir_ptapell", (DL_FUNC) &_scorecompdir_ptapell, 6},
    {"_scorecompdir_ptapesmo", (DL_FUNC) &_scorecompdir_ptapesmo, 8},
    {"_scorecompdir_pTaylorApprox", (DL_FUNC) &_scorecompdir_pTaylorApprox, 5},
    {"_rcpp_module_boot_manifolds", (DL_FUNC) &_rcpp_module_boot_manifolds, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_scorecompdir(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
